services:
  postgres:
    image: postgres:17
    container_name: db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-user} -d ${DB_NAME:-app}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --requirepass "${REDIS_PASSWORD:-}"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #     args:
  #       DB_URL: postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     # Database Configuration
  #     DB_USER: ${DB_USER}
  #     DB_PASSWORD: ${DB_PASSWORD}
  #     DB_NAME: ${DB_NAME}
  #     DB_URL: postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
  #     DB_SQL_LOGGING: ${DB_SQL_LOGGING:-false}
  #
  #     # Redis Configuration
  #     REDIS_HOST: redis
  #     REDIS_PORT: 6379
  #     REDIS_DB: ${REDIS_DB:-1}
  #     REDIS_PASSWORD: ${REDIS_PASSWORD:-}
  #     REDIS_DEBUG: ${REDIS_DEBUG:-false}
  #
  #     # Authentication Configuration
  #     AUTH_SECRET: ${AUTH_SECRET}
  #     AUTH_ALGORITHM: ${AUTH_ALGORITHM:-HS256}
  #     AUTH_TOKEN_EXPIRE_MINUTES: ${AUTH_TOKEN_EXPIRE_MINUTES:-30}
  #     AUTH_MAX_LOGIN_ATTEMPTS: ${AUTH_MAX_LOGIN_ATTEMPTS:-5}
  #     AUTH_LOCKOUT_MINUTES: ${AUTH_LOCKOUT_MINUTES:-15}
  #     AUTH_DEBUG: ${AUTH_DEBUG:-false}
  #
  #     # Email Configuration
  #     EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
  #     EMAIL_PORT: ${EMAIL_PORT:-465}
  #     EMAIL_USERNAME: ${EMAIL_USERNAME}
  #     EMAIL_PASSWORD: ${EMAIL_PASSWORD}
  #     EMAIL_FROM: ${EMAIL_FROM}
  #     EMAIL_TO: ${EMAIL_TO}
  #
  #     # Error Configuration
  #     ERROR_DEBUG: ${ERROR_DEBUG:-false}
  #     ERROR_RATE_LIMIT_PERIOD: ${ERROR_RATE_LIMIT_PERIOD:-300}
  #     ERROR_RATE_LIMIT_COUNT: ${ERROR_RATE_LIMIT_COUNT:-10}
  #
  #     # FastAPI Configuration
  #     API_TITLE: ${API_TITLE:-"BSS Backend API"}
  #     API_DESCRIPTION: ${API_DESCRIPTION:-"Bridge Security Solutions Backend API"}
  #     API_VERSION: ${API_VERSION:-"0.1.0"}
  #
  #     # CORS Configuration
  #     CORS_ORIGINS: ${CORS_ORIGINS:-*}
  #     CORS_ALLOW_CREDENTIALS: ${CORS_ALLOW_CREDENTIALS:-true}
  #     CORS_ALLOW_METHODS: ${CORS_ALLOW_METHODS:-*}
  #     CORS_ALLOW_HEADERS: ${CORS_ALLOW_HEADERS:-*}
  #
  #     # Logging Configuration
  #     LOG_LEVEL: ${LOG_LEVEL:-INFO}
  #     LOG_FORMAT: ${LOG_FORMAT:-"%(asctime)s - %(name)s - %(levelname)s - %(message)s"}
  #     LOG_DATE_FORMAT: ${LOG_DATE_FORMAT:-"%Y-%m-%d %H:%M:%S"}

volumes:
  postgres_data:
  redis_data:
